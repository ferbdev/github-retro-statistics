@page "/auth-callback"
@using Application.Model;
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject GithubConfigs ghConfigs;

<h3>Processando login...</h3>

@code {
    [Parameter] public string Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var code = Navigation.ToAbsoluteUri(Navigation.Uri).Query
            .Split('?')
            .FirstOrDefault(q => q.StartsWith("code="))?
            .Split('=')[1];

        if (!string.IsNullOrEmpty(code))
        {
            var token = await GetAccessTokenAsync(code);

            ghConfigs.Token = token;
            Console.WriteLine($"Token recebido: {token}");

            Navigation.NavigateTo("/getStatistics");
        }
        else
        {
            Console.WriteLine("Erro ao autenticar.");
        }
    }

    private async Task<string> GetAccessTokenAsync(string code)
    {
        using var client = HttpClientFactory.CreateClient();
        var requestBody = new Dictionary<string, string>
        {
            { "client_id", ghConfigs.ClientId },
            { "client_secret", ghConfigs.ClientSecret },
            { "code", code },
            { "redirect_uri", "https://localhost:7145/auth-callback" }
        };

        var requestContent = new FormUrlEncodedContent(requestBody);
        var response = await client.PostAsync("https://github.com/login/oauth/access_token", requestContent);
        response.EnsureSuccessStatusCode();

        var responseString = await response.Content.ReadAsStringAsync();
        var token = responseString.Split('&')
            .FirstOrDefault(p => p.StartsWith("access_token="))?
            .Split('=')[1];

        return token ?? throw new Exception("Falha ao obter o token de acesso.");
    }
}

@page "/getStatistics"
@using Application.Model;
@using System.Text.Json;
@using System.Net.Http.Headers;
@using System.Net;
@using Application.Service.Interface;
@using static Application.Service.GithubStatisticsService;

@inject NavigationManager Navigation;
@inject GithubConfigs GithubConfigs;
@inject IGithubStatisticsService _githubService;
@inject IHttpClientFactory HttpClientFactory;

<body>
    @if (!StatisticsFound)
    {
        <div class="form-container">
            <form @onsubmit="GetStatistics">
                @* <div class="form-group">
            <input type="text" @bind="Organization" id="organization" name="organization" placeholder="Organization Name" required>
            </div> *@
                <div class="form-group">
                    <div class="form-user-group">
                        <div class="user-info">
                            <img src="@User.avatar_url" class="avatar">
                            <label>@User.name</label>
                            <label>@User.login</label>
                            <label>@User.company</label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="submit-button">
                        Get Statistics
                    </button>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="ranking-container">
            <div class="header">
                <div class="header-item">Top 10 Repos</div>
            </div>
            @foreach (var item in RankingItems)
            {
                <div class="ranking-item">
                    <div class="position">
                        @if (item.Position == 1)
                        {
                            <span>🥇 @item.Position</span>
                        }
                        else if (item.Position == 2)
                        {
                            <span>🥈 @item.Position</span>
                        }
                        else if (item.Position == 3)
                        {
                            <span>🥉 @item.Position</span>
                        }
                        else
                        {
                            <span>🎖️ @item.Position</span>
                        }

                    </div>
                    <div class="avatar-name">
                        @if (item.AvatarUrl != null)
                        {
                            <img src="@item.AvatarUrl" alt="Avatar">
                        }
                        <span>@item.Name</span>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Popup de Loading -->
    @if (IsLoading)
    {
        <div class="loading-overlay">
            <div class="loading-spinner">
                Building the retrospective...
            </div>
        </div>
    }

</body>

@code {
    private bool StatisticsFound { get; set; }
    private bool IsLoading { get; set; }
    private string SelectedOrg { get; set; }
    private List<RankingItem> RankingItems = new List<RankingItem>();
    private User User = new User();

    [Parameter] public string Organization { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender) // prevent infinite loop
        // {
        //     StateHasChanged();  // update view
        // }
    }

    protected async override void OnInitialized()
    {
        _githubService.GithubStatisticsUpdated += OnGithubStatisticsFinish;

        User = await _githubService.GetUser(GithubConfigs.Token);

        await InvokeAsync(StateHasChanged);
    }

    private async Task GetStatistics()
    {
        _ = _githubService.GetStatistics(Organization, GithubConfigs.Token);
        IsLoading = true;
        await InvokeAsync(StateHasChanged);
    }

    private void OnGithubStatisticsFinish(List<RankingItem> data)
    {
        RankingItems = data;
        StatisticsFound = true;
        IsLoading = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task<string> GetAccessTokenAsync(string code)
    {
        using var client = HttpClientFactory.CreateClient();
        var requestBody = new Dictionary<string, string>
        {
            { "client_id", GithubConfigs.ClientId },
            { "client_secret", GithubConfigs.ClientSecret },
            { "code", code },
            { "redirect_uri", "https://localhost:7145/auth-callback" }
        };

        var requestContent = new FormUrlEncodedContent(requestBody);
        var response = await client.PostAsync("https://github.com/login/oauth/access_token", requestContent);
        response.EnsureSuccessStatusCode();

        var responseString = await response.Content.ReadAsStringAsync();
        var token = responseString.Split('&')
            .FirstOrDefault(p => p.StartsWith("access_token="))?
            .Split('=')[1];

        return token ?? throw new Exception("Falha ao obter o token de acesso.");
    }
}

@page "/getStatistics"
@using Application.Model;
@using System.Text.Json;
@using System.Net.Http.Headers;
@using System.Net;
@using Application.Service.Interface;
@using static Application.Service.GithubStatisticsService;

@inject NavigationManager Navigation;
@inject GithubConfigs GithubConfigs;
@inject IGithubStatisticsService _githubService;
@inject IHttpClientFactory HttpClientFactory;

<body>
    @if (!StatisticsFound)
    {
        <div class="form-container">
            <form @onsubmit="GetStatistics">
                @* <div class="form-group">
            <input type="text" @bind="Organization" id="organization" name="organization" placeholder="Organization Name" required>
            </div> *@
                <div class="form-group">
                    <div class="form-user-group">
                        <div class="user-info">
                            <img src="@User.avatar_url" class="avatar">
                            <label>@User.name</label>
                            <label>@User.login</label>
                            <label>@User.company</label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="submit-button">
                        Get Statistics
                    </button>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="story-body">
            <div class="story-container">
                <div class="story active">
                    <div>
                        <h1>O commit mais longo</h1>

                        <div class="box">
                            <p>@TopLongCommit.RepoName</p>
                            <p>@TopLongCommit.TotalChangedLines linhas</p>
                        </div>
                    </div>
                    <div>
                        <label>
                            Você fez o commit mais longo de todos os tempos!
                            @TopLongCommit.TotalChangedLines linhas de código no repo @TopLongCommit.RepoName, o que foi?!";
                        </label>
                    </div>
                </div>
                <div class="story">
                </div>
                <div class="story">
                </div>

                <div class="controls">
                    <button class="control-btn" id="prev">&#9664;</button>
                    <button class="control-btn" id="next">&#9654;</button>
                </div>
            </div>

            <script>
                const stories = document.querySelectorAll('.story');
                const prevBtn = document.getElementById('prev');
                const nextBtn = document.getElementById('next');
                let currentStory = 0;

                function updateStories(index) {
                    stories.forEach((story, i) => {
                        story.classList.toggle('active', i === index);
                    });
                }

                prevBtn.addEventListener('click', () => {
                    currentStory = (currentStory - 1 + stories.length) % stories.length;
                    updateStories(currentStory);
                });

                nextBtn.addEventListener('click', () => {
                    currentStory = (currentStory + 1) % stories.length;
                    updateStories(currentStory);
                });
            </script>
        </div>
    }

    <!-- Popup de Loading -->
    @if (IsLoading)
    {
        <div class="loading-overlay">
            <div class="loading-spinner">
                Building the retrospective...
            </div>
        </div>
    }

</body>

@code {
    private bool StatisticsFound { get; set; }
    private bool IsLoading { get; set; }
    private string SelectedOrg { get; set; }
    private List<RankingItem> RankingItems = new List<RankingItem>();
    private TopLongCommit TopLongCommit { get; set; }
    private User User = new User();

    [Parameter] public string Organization { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender) // prevent infinite loop
        // {
        //     StateHasChanged();  // update view
        // }
    }

    protected async override void OnInitialized()
    {
        _githubService.TopLongCommitUpdated += OnTopLongCommitFinish;

        User = await _githubService.GetUser(GithubConfigs.Token);

        Organization = User.company;

        await InvokeAsync(StateHasChanged);
    }

    private async Task GetStatistics()
    {
        _ = _githubService.GetTopLongCommit(User, Organization, GithubConfigs.Token);
        IsLoading = true;
        await InvokeAsync(StateHasChanged);
    }

    private void OnTopLongCommitFinish(TopLongCommit data)
    {
        TopLongCommit = data;
        StatisticsFound = true;
        IsLoading = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task<string> GetAccessTokenAsync(string code)
    {
        using var client = HttpClientFactory.CreateClient();
        var requestBody = new Dictionary<string, string>
        {
            { "client_id", GithubConfigs.ClientId },
            { "client_secret", GithubConfigs.ClientSecret },
            { "code", code },
            { "redirect_uri", "https://localhost:7145/auth-callback" }
        };

        var requestContent = new FormUrlEncodedContent(requestBody);
        var response = await client.PostAsync("https://github.com/login/oauth/access_token", requestContent);
        response.EnsureSuccessStatusCode();

        var responseString = await response.Content.ReadAsStringAsync();
        var token = responseString.Split('&')
            .FirstOrDefault(p => p.StartsWith("access_token="))?
            .Split('=')[1];

        return token ?? throw new Exception("Falha ao obter o token de acesso.");
    }
}
